// Copyright Epic Games, Inc. All Rights Reserved.

#include "GAS_UtilityEditorOnly.h"

#include "GameplayAbilityWizard.h"
#include "GAS_UtilityInputProcessor.h"
#include "GAS_Utility/AbilitySystem/GameplayAbilityBase.h"
#include "Kismet2/KismetEditorUtilities.h"

#define LOCTEXT_NAMESPACE "FGAS_UtilityEditorOnlyModule"

void FGAS_UtilityEditorOnlyModule::StartupModule()
{
	// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module


	FCoreDelegates::OnPostEngineInit.AddRaw(this, &FGAS_UtilityEditorOnlyModule::OnPostEngineInit);
}

void FGAS_UtilityEditorOnlyModule::ShutdownModule()
{
	// This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,
	// we call this function before unloading the module.
}

void FGAS_UtilityEditorOnlyModule::OnPostEngineInit()
{
	FGAS_UtilityInputProcessor::Create();
	GameplayTagWizard::Register();
	GameplayAbilityWizard::Register();
	DefaultAbilityNodes.Add(FName("InitVariables"));
	DefaultAbilityNodes.Add(FName("SetupAbilityStart"));
	DefaultAbilityNodes.Add(FName("BindGameplayEvents"));
	DefaultAbilityNodes.Add(FName("SetupTasks"));
	DefaultAbilityNodes.Add(FName("FinishAbility"));
	DefaultNodeToSpawnByClass.Add(UGameplayAbilityBase::StaticClass(),DefaultAbilityNodes);
}

void FGAS_UtilityEditorOnlyModule::LoadEnglishWordsList()
{
	if (!EnglishWordsListLoaded)
	{
		EnglishWordsListLoaded = true;

		FString ProjectDir = FPaths::ProjectDir();
		FString ConfigDir = FPaths::Combine(*ProjectDir, TEXT("Config"));
		FString FilePath = FPaths::Combine(*ConfigDir, TEXT("Dictionary.txt"));

		if (!FPaths::FileExists(FilePath))
		{
			return;
		}

		FString OutText;
		bool bReadSuccess = FFileHelper::LoadFileToString(OutText, *FilePath);
		if (bReadSuccess)
		{
			OutText.ParseIntoArrayLines(EnglishWords);
		}
	}
}

void FGAS_UtilityEditorOnlyModule::ForceReloadEnglishWordsList()
{
	EnglishWords.Empty();
	EnglishWordsListLoaded = true;

	FString ProjectDir = FPaths::ProjectDir();
	FString ConfigDir = FPaths::Combine(*ProjectDir, TEXT("Config"));
	FString FilePath = FPaths::Combine(*ConfigDir, TEXT("Dictionary.txt"));

	if (!FPaths::FileExists(FilePath))
	{
		return;
	}

	FString OutText;
	bool bReadSuccess = FFileHelper::LoadFileToString(OutText, *FilePath);
	if (bReadSuccess)
	{
		OutText.ParseIntoArrayLines(EnglishWords);
	}
}

bool FGAS_UtilityEditorOnlyModule::IsValidEnglishWord(FString Word)
{
	if (!EnglishWordsListLoaded)
		LoadEnglishWordsList();

	return EnglishWords.Contains(Word);
}

void FGAS_UtilityEditorOnlyModule::AddDefaultNodeForClass(UClass* Class, TArray<FName> Nodes)
{
	if(!DefaultNodeToSpawnByClass.Contains(Class))
	{
		DefaultNodeToSpawnByClass.Add(Class,Nodes);
		for (auto Node : Nodes)
		{
			FKismetEditorUtilities::RegisterAutoGeneratedDefaultEvent(this, Class, Node);			
		}
	}
}


#undef LOCTEXT_NAMESPACE

IMPLEMENT_MODULE(FGAS_UtilityEditorOnlyModule, GAS_UtilityEditorOnly)


DEFINE_LOG_CATEGORY(LogGAS_UtilityEditorOnly)
